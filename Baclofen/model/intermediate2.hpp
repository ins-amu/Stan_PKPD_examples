
// Code generated by stanc 2c6fa27
#include <stan/model/model_header.hpp>
namespace intermediate2_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 133> locations_array__ = 
{" (found before start of program)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 48, column 1 to column 35)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 49, column 1 to column 35)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 50, column 1 to column 34)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 53, column 1 to column 29)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 54, column 1 to column 29)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 55, column 1 to column 25)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 58, column 1 to column 23)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 64, column 1 to column 33)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 68, column 1 to column 40)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 73, column 1 to column 42)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 77, column 1 to column 35)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 78, column 3 to column 33)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 79, column 1 to column 23)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 92, column 1 to column 41)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 65, column 1 to column 50)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 69, column 1 to column 91)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 75, column 1 to column 25)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 83, column 2 to line 86, column 41)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 88, column 2 to column 77)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 81, column 19 to line 89, column 2)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 81, column 1 to line 89, column 2)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 91, column 1 to column 23)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 122, column 1 to column 23)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 123, column 1 to column 29)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 124, column 1 to column 44)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 125, column 1 to column 43)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 127, column 1 to column 25)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 128, column 1 to column 25)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 129, column 1 to column 26)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 130, column 1 to column 26)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 134, column 8 to column 44)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 133, column 19 to line 135, column 6)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 133, column 5 to line 135, column 6)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 132, column 18 to line 136, column 2)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 132, column 1 to line 136, column 2)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 138, column 1 to column 98)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 141, column 1 to column 33)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 145, column 2 to line 149, column 48)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 151, column 2 to column 89)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 143, column 19 to line 152, column 2)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 143, column 1 to line 152, column 2)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 158, column 8 to column 58)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 158, column 7 to column 59)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 157, column 25 to column 43)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 157, column 24 to column 44)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 157, column 2 to line 158, column 59)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 161, column 8 to column 63)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 161, column 7 to column 64)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 160, column 29 to column 47)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 160, column 28 to column 48)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 160, column 2 to line 161, column 64)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 155, column 20 to line 162, column 2)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 155, column 1 to line 162, column 2)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 166, column 2 to column 68)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 164, column 23 to line 167, column 2)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 164, column 1 to line 167, column 2)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 101, column 1 to column 39)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 102, column 4 to column 41)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 103, column 4 to column 43)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 106, column 1 to column 26)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 108, column 1 to column 35)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 109, column 3 to column 26)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 112, column 4 to column 25)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 115, column 4 to column 94)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 4, column 1 to column 22)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 5, column 1 to column 11)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 7, column 7 to column 12)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 7, column 1 to column 25)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 8, column 7 to column 12)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 8, column 1 to column 24)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 9, column 7 to column 12)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 9, column 1 to column 22)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 10, column 7 to column 12)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 10, column 1 to column 22)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 11, column 7 to column 12)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 11, column 1 to column 24)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 12, column 7 to column 12)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 12, column 1 to column 22)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 13, column 7 to column 12)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 13, column 1 to column 25)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 14, column 7 to column 12)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 14, column 1 to column 24)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 15, column 7 to column 12)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 15, column 1 to column 23)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 17, column 9 to column 13)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 17, column 1 to column 21)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 19, column 1 to column 21)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 20, column 7 to column 11)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 20, column 1 to column 26)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 21, column 7 to column 11)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 21, column 1 to column 25)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 22, column 7 to column 11)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 22, column 1 to column 23)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 24, column 7 to column 11)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 24, column 1 to column 27)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 25, column 7 to column 11)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 25, column 1 to column 26)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 27, column 7 to column 11)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 27, column 1 to column 23)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 29, column 1 to column 34)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 30, column 1 to column 34)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 31, column 1 to column 34)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 37, column 1 to column 15)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 38, column 1 to column 17)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 39, column 1 to column 12)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 41, column 8 to column 12)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 41, column 1 to column 35)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 53, column 22 to column 23)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 54, column 19 to column 20)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 55, column 9 to column 10)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 55, column 12 to column 16)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 64, column 19 to column 20)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 68, column 19 to column 23)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 68, column 25 to column 26)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 73, column 17 to column 21)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 73, column 23 to column 29)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 77, column 19 to column 24)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 77, column 26 to column 30)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 78, column 21 to column 26)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 79, column 8 to column 12)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 92, column 8 to column 12)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 122, column 8 to column 12)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 123, column 8 to column 9)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 123, column 11 to column 15)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 124, column 19 to column 23)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 124, column 25 to column 26)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 125, column 19 to column 23)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 125, column 25 to column 26)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 127, column 8 to column 13)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 128, column 8 to column 13)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 129, column 8 to column 13)",
 " (in '/home/tng/Documents/simulated_concentration_8/model/intermediate2.stan', line 130, column 8 to column 13)"};




class intermediate2_model final : public model_base_crtp<intermediate2_model> {

 private:
  int nData;
  int nObs;
  std::vector<double> TIME;
  std::vector<int> EVID;
  std::vector<int> II;
  std::vector<int> SS;
  std::vector<double> AMT;
  std::vector<int> ID;
  std::vector<double> RATE;
  std::vector<int> ADDL;
  std::vector<int> CMT;
  Eigen::Matrix<double, -1, 1> cObs__;
  int nSub;
  std::vector<int> ID_list;
  std::vector<int> starts;
  std::vector<int> ends;
  std::vector<int> nDataSub;
  std::vector<int> nObsSub;
  std::vector<int> iObs;
  double CL_pop_meanPrior;
  double V1_pop_meanPrior;
  double ka_pop_meanPrior;
  int nCmt;
  int nTheta;
  int K;
  Eigen::Matrix<double, -1, 1> logcObs__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> cObs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> logcObs{nullptr, 0};
 
 public:
  ~intermediate2_model() { }
  
  inline std::string model_name() const final { return "intermediate2_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 2c6fa27", "stancflags = "};
  }
  
  
  intermediate2_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "intermediate2_model_namespace::intermediate2_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 65;
      context__.validate_dims("data initialization","nData","int",
           std::vector<size_t>{});
      nData = std::numeric_limits<int>::min();
      
      
      current_statement__ = 65;
      nData = context__.vals_i("nData")[(1 - 1)];
      current_statement__ = 65;
      stan::math::check_greater_or_equal(function__, "nData", nData, 0);
      current_statement__ = 66;
      context__.validate_dims("data initialization","nObs","int",
           std::vector<size_t>{});
      nObs = std::numeric_limits<int>::min();
      
      
      current_statement__ = 66;
      nObs = context__.vals_i("nObs")[(1 - 1)];
      current_statement__ = 67;
      stan::math::validate_non_negative_index("TIME", "nData", nData);
      current_statement__ = 68;
      context__.validate_dims("data initialization","TIME","double",
           std::vector<size_t>{static_cast<size_t>(nData)});
      TIME = 
        std::vector<double>(nData, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 68;
      TIME = context__.vals_r("TIME");
      current_statement__ = 69;
      stan::math::validate_non_negative_index("EVID", "nData", nData);
      current_statement__ = 70;
      context__.validate_dims("data initialization","EVID","int",
           std::vector<size_t>{static_cast<size_t>(nData)});
      EVID = std::vector<int>(nData, std::numeric_limits<int>::min());
      
      
      current_statement__ = 70;
      EVID = context__.vals_i("EVID");
      current_statement__ = 71;
      stan::math::validate_non_negative_index("II", "nData", nData);
      current_statement__ = 72;
      context__.validate_dims("data initialization","II","int",
           std::vector<size_t>{static_cast<size_t>(nData)});
      II = std::vector<int>(nData, std::numeric_limits<int>::min());
      
      
      current_statement__ = 72;
      II = context__.vals_i("II");
      current_statement__ = 73;
      stan::math::validate_non_negative_index("SS", "nData", nData);
      current_statement__ = 74;
      context__.validate_dims("data initialization","SS","int",
           std::vector<size_t>{static_cast<size_t>(nData)});
      SS = std::vector<int>(nData, std::numeric_limits<int>::min());
      
      
      current_statement__ = 74;
      SS = context__.vals_i("SS");
      current_statement__ = 75;
      stan::math::validate_non_negative_index("AMT", "nData", nData);
      current_statement__ = 76;
      context__.validate_dims("data initialization","AMT","double",
           std::vector<size_t>{static_cast<size_t>(nData)});
      AMT = 
        std::vector<double>(nData, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 76;
      AMT = context__.vals_r("AMT");
      current_statement__ = 77;
      stan::math::validate_non_negative_index("ID", "nData", nData);
      current_statement__ = 78;
      context__.validate_dims("data initialization","ID","int",
           std::vector<size_t>{static_cast<size_t>(nData)});
      ID = std::vector<int>(nData, std::numeric_limits<int>::min());
      
      
      current_statement__ = 78;
      ID = context__.vals_i("ID");
      current_statement__ = 79;
      stan::math::validate_non_negative_index("RATE", "nData", nData);
      current_statement__ = 80;
      context__.validate_dims("data initialization","RATE","double",
           std::vector<size_t>{static_cast<size_t>(nData)});
      RATE = 
        std::vector<double>(nData, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 80;
      RATE = context__.vals_r("RATE");
      current_statement__ = 81;
      stan::math::validate_non_negative_index("ADDL", "nData", nData);
      current_statement__ = 82;
      context__.validate_dims("data initialization","ADDL","int",
           std::vector<size_t>{static_cast<size_t>(nData)});
      ADDL = std::vector<int>(nData, std::numeric_limits<int>::min());
      
      
      current_statement__ = 82;
      ADDL = context__.vals_i("ADDL");
      current_statement__ = 83;
      stan::math::validate_non_negative_index("CMT", "nData", nData);
      current_statement__ = 84;
      context__.validate_dims("data initialization","CMT","int",
           std::vector<size_t>{static_cast<size_t>(nData)});
      CMT = std::vector<int>(nData, std::numeric_limits<int>::min());
      
      
      current_statement__ = 84;
      CMT = context__.vals_i("CMT");
      current_statement__ = 85;
      stan::math::validate_non_negative_index("cObs", "nObs", nObs);
      current_statement__ = 86;
      context__.validate_dims("data initialization","cObs","double",
           std::vector<size_t>{static_cast<size_t>(nObs)});
      cObs__ = 
        Eigen::Matrix<double, -1, 1>::Constant(nObs,
          std::numeric_limits<double>::quiet_NaN());
      new (&cObs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(cObs__.data(), nObs);
        
      
      {
        std::vector<local_scalar_t__> cObs_flat__;
        current_statement__ = 86;
        cObs_flat__ = context__.vals_r("cObs");
        current_statement__ = 86;
        pos__ = 1;
        current_statement__ = 86;
        for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
          current_statement__ = 86;
          stan::model::assign(cObs, cObs_flat__[(pos__ - 1)],
            "assigning variable cObs", stan::model::index_uni(sym1__));
          current_statement__ = 86;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 87;
      context__.validate_dims("data initialization","nSub","int",
           std::vector<size_t>{});
      nSub = std::numeric_limits<int>::min();
      
      
      current_statement__ = 87;
      nSub = context__.vals_i("nSub")[(1 - 1)];
      current_statement__ = 87;
      stan::math::check_greater_or_equal(function__, "nSub", nSub, 0);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("ID_list", "nSub", nSub);
      current_statement__ = 89;
      context__.validate_dims("data initialization","ID_list","int",
           std::vector<size_t>{static_cast<size_t>(nSub)});
      ID_list = std::vector<int>(nSub, std::numeric_limits<int>::min());
      
      
      current_statement__ = 89;
      ID_list = context__.vals_i("ID_list");
      current_statement__ = 90;
      stan::math::validate_non_negative_index("starts", "nSub", nSub);
      current_statement__ = 91;
      context__.validate_dims("data initialization","starts","int",
           std::vector<size_t>{static_cast<size_t>(nSub)});
      starts = std::vector<int>(nSub, std::numeric_limits<int>::min());
      
      
      current_statement__ = 91;
      starts = context__.vals_i("starts");
      current_statement__ = 92;
      stan::math::validate_non_negative_index("ends", "nSub", nSub);
      current_statement__ = 93;
      context__.validate_dims("data initialization","ends","int",
           std::vector<size_t>{static_cast<size_t>(nSub)});
      ends = std::vector<int>(nSub, std::numeric_limits<int>::min());
      
      
      current_statement__ = 93;
      ends = context__.vals_i("ends");
      current_statement__ = 94;
      stan::math::validate_non_negative_index("nDataSub", "nSub", nSub);
      current_statement__ = 95;
      context__.validate_dims("data initialization","nDataSub","int",
           std::vector<size_t>{static_cast<size_t>(nSub)});
      nDataSub = std::vector<int>(nSub, std::numeric_limits<int>::min());
      
      
      current_statement__ = 95;
      nDataSub = context__.vals_i("nDataSub");
      current_statement__ = 96;
      stan::math::validate_non_negative_index("nObsSub", "nSub", nSub);
      current_statement__ = 97;
      context__.validate_dims("data initialization","nObsSub","int",
           std::vector<size_t>{static_cast<size_t>(nSub)});
      nObsSub = std::vector<int>(nSub, std::numeric_limits<int>::min());
      
      
      current_statement__ = 97;
      nObsSub = context__.vals_i("nObsSub");
      current_statement__ = 98;
      stan::math::validate_non_negative_index("iObs", "nObs", nObs);
      current_statement__ = 99;
      context__.validate_dims("data initialization","iObs","int",
           std::vector<size_t>{static_cast<size_t>(nObs)});
      iObs = std::vector<int>(nObs, std::numeric_limits<int>::min());
      
      
      current_statement__ = 99;
      iObs = context__.vals_i("iObs");
      current_statement__ = 100;
      context__.validate_dims("data initialization","CL_pop_meanPrior",
          "double", std::vector<size_t>{});
      CL_pop_meanPrior = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 100;
      CL_pop_meanPrior = context__.vals_r("CL_pop_meanPrior")[(1 - 1)];
      current_statement__ = 100;
      stan::math::check_greater_or_equal(function__, "CL_pop_meanPrior",
                                            CL_pop_meanPrior, 0);
      current_statement__ = 101;
      context__.validate_dims("data initialization","V1_pop_meanPrior",
          "double", std::vector<size_t>{});
      V1_pop_meanPrior = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 101;
      V1_pop_meanPrior = context__.vals_r("V1_pop_meanPrior")[(1 - 1)];
      current_statement__ = 101;
      stan::math::check_greater_or_equal(function__, "V1_pop_meanPrior",
                                            V1_pop_meanPrior, 0);
      current_statement__ = 102;
      context__.validate_dims("data initialization","ka_pop_meanPrior",
          "double", std::vector<size_t>{});
      ka_pop_meanPrior = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 102;
      ka_pop_meanPrior = context__.vals_r("ka_pop_meanPrior")[(1 - 1)];
      current_statement__ = 102;
      stan::math::check_greater_or_equal(function__, "ka_pop_meanPrior",
                                            ka_pop_meanPrior, 0);
      current_statement__ = 103;
      nCmt = std::numeric_limits<int>::min();
      
      
      current_statement__ = 103;
      nCmt = 2;
      current_statement__ = 104;
      nTheta = std::numeric_limits<int>::min();
      
      
      current_statement__ = 104;
      nTheta = 3;
      current_statement__ = 105;
      K = std::numeric_limits<int>::min();
      
      
      current_statement__ = 105;
      K = 3;
      current_statement__ = 106;
      stan::math::validate_non_negative_index("logcObs", "nObs", nObs);
      current_statement__ = 107;
      logcObs__ = 
        Eigen::Matrix<double, -1, 1>::Constant(nObs,
          std::numeric_limits<double>::quiet_NaN());
      new (&logcObs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(logcObs__.data(), nObs);
        
      
      current_statement__ = 107;
      stan::model::assign(logcObs, stan::math::log(cObs),
        "assigning variable logcObs");
      current_statement__ = 108;
      stan::math::validate_non_negative_index("L", "K", K);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("L", "K", K);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("omega", "K", K);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("etaStd", "K", K);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("etaStd", "nSub", nSub);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("THETA_pop", "K", K);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("THETA_norm", "nSub", nSub);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("THETA_norm", "K", K);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("THETA_ind", "nSub", nSub);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("THETA_ind", "nTheta", nTheta);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("X", "nData", nData);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("X", "nCmt", nCmt);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("cHat", "nData", nData);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("cHatObs", "nObs", nObs);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("logcHatObs", "nObs", nObs);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("log_lik", "nObs", nObs);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("etaStdPred", "K", K);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("etaStdPred", "nSub", nSub);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("THETAPred_norm", "nSub", nSub);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("THETAPred_norm", "K", K);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("THETAPred_ind", "nSub", nSub);
      current_statement__ = 128;
      stan::math::validate_non_negative_index("THETAPred_ind", "K", K);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("XPred", "nData", nData);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("cHatPred", "nData", nData);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("cPred_pop", "nData", nData);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("cPred_ind", "nData", nData);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + ((K * (K - 1)) / 2) + K + (K * nSub) + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "intermediate2_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ CL_pop = DUMMY_VAR__;
      current_statement__ = 1;
      CL_pop = in__.template read_constrain_lub<local_scalar_t__, 
                 jacobian__>(0, 100, lp__);
      local_scalar_t__ V1_pop = DUMMY_VAR__;
      current_statement__ = 2;
      V1_pop = in__.template read_constrain_lub<local_scalar_t__, 
                 jacobian__>(0, 150, lp__);
      local_scalar_t__ ka_pop = DUMMY_VAR__;
      current_statement__ = 3;
      ka_pop = in__.template read_constrain_lub<local_scalar_t__, 
                 jacobian__>(0, 50, lp__);
      Eigen::Matrix<local_scalar_t__, -1, -1> L =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(K, K, DUMMY_VAR__);
      current_statement__ = 4;
      L = in__.template read_constrain_cholesky_factor_corr<
            Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__, K);
      Eigen::Matrix<local_scalar_t__, -1, 1> omega =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 5;
      omega = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
                K);
      Eigen::Matrix<local_scalar_t__, -1, -1> etaStd =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(K, nSub,
           DUMMY_VAR__);
      current_statement__ = 6;
      etaStd = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(K,
                 nSub);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 7;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> THETA_pop =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(THETA_pop,
        stan::math::to_vector(std::vector<local_scalar_t__>{CL_pop, V1_pop,
          ka_pop}), "assigning variable THETA_pop");
      Eigen::Matrix<local_scalar_t__, -1, -1> THETA_norm =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(nSub, K,
           DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(THETA_norm,
        stan::math::transpose(
          stan::math::elt_multiply(stan::math::rep_matrix(THETA_pop, nSub),
            stan::math::exp(
              stan::math::diag_pre_multiply(omega,
                stan::math::multiply(L, etaStd))))),
        "assigning variable THETA_norm");
      Eigen::Matrix<local_scalar_t__, -1, -1> THETA_ind =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(nSub, nTheta,
           DUMMY_VAR__);
      current_statement__ = 17;
      stan::model::assign(THETA_ind, THETA_norm,
        "assigning variable THETA_ind");
      Eigen::Matrix<local_scalar_t__, -1, -1> X =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(nData, nCmt,
           DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> cHat =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nData, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> cHatObs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nObs, DUMMY_VAR__);
      current_statement__ = 21;
      for (int i = 1; i <= nSub; ++i) {
        current_statement__ = 18;
        stan::model::assign(X,
          stan::math::transpose(
            torsten::pmx_solve_onecpt(
              stan::model::rvalue(TIME, "TIME",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(AMT, "AMT",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(RATE, "RATE",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::math::promote_scalar<double>(stan::model::rvalue(II,
                                                   "II",
                                                   stan::model::index_min_max(
                                                     stan::model::rvalue(
                                                       starts, "starts",
                                                       stan::model::index_uni(i)), 
                                                     stan::model::rvalue(
                                                       ends, "ends",
                                                       stan::model::index_uni(i))))),
              stan::model::rvalue(EVID, "EVID",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(CMT, "CMT",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(ADDL, "ADDL",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(SS, "SS",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::math::to_array_1d(
                stan::model::rvalue(THETA_ind, "THETA_ind",
                  stan::model::index_uni(i), stan::model::index_omni())))),
          "assigning variable X", stan::model::index_min_max(stan::model::rvalue(
                                                               starts,
                                                               "starts",
                                                               stan::model::index_uni(i)), 
                                    stan::model::rvalue(ends, "ends",
                                      stan::model::index_uni(i))),
                                    stan::model::index_omni());
        current_statement__ = 19;
        stan::model::assign(cHat,
          stan::math::elt_divide(
            stan::math::col(
              stan::model::rvalue(X, "X",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))), 2),
            stan::model::rvalue(THETA_ind, "THETA_ind",
              stan::model::index_uni(i), stan::model::index_uni(2))),
          "assigning variable cHat", stan::model::index_min_max(stan::model::rvalue(
                                                                  starts,
                                                                  "starts",
                                                                  stan::model::index_uni(i)), 
                                       stan::model::rvalue(ends, "ends",
                                         stan::model::index_uni(i))));
      }
      current_statement__ = 22;
      stan::model::assign(cHatObs,
        stan::model::rvalue(cHat, "cHat", stan::model::index_multi(iObs)),
        "assigning variable cHatObs");
      Eigen::Matrix<local_scalar_t__, -1, 1> logcHatObs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nObs, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(logcHatObs, stan::math::log(cHatObs),
        "assigning variable logcHatObs");
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "THETA_pop", THETA_pop,
                                            0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "THETA_norm",
                                            THETA_norm, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "THETA_ind", THETA_ind,
                                            0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "X", X, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "cHat", cHat, 0);
      {
        current_statement__ = 57;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(CL_pop, CL_pop_meanPrior, 5));
        current_statement__ = 58;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(V1_pop, V1_pop_meanPrior, 5));
        current_statement__ = 59;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(ka_pop, ka_pop_meanPrior, 0.5));
        current_statement__ = 60;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(L, 1));
        current_statement__ = 61;
        lp_accum__.add(
          stan::math::std_normal_lpdf<propto__>(
            stan::math::to_vector(etaStd)));
        current_statement__ = 62;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(omega, 0, 0.1));
        current_statement__ = 63;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma, 0, 1));
        current_statement__ = 64;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(
            stan::math::fmax(stan::math::machine_precision(), logcObs),
            stan::math::fmax(stan::math::machine_precision(), logcHatObs),
            sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "intermediate2_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double CL_pop = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      CL_pop = in__.template read_constrain_lub<local_scalar_t__, 
                 jacobian__>(0, 100, lp__);
      double V1_pop = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      V1_pop = in__.template read_constrain_lub<local_scalar_t__, 
                 jacobian__>(0, 150, lp__);
      double ka_pop = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      ka_pop = in__.template read_constrain_lub<local_scalar_t__, 
                 jacobian__>(0, 50, lp__);
      Eigen::Matrix<double, -1, -1> L =
         Eigen::Matrix<double, -1, -1>::Constant(K, K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      L = in__.template read_constrain_cholesky_factor_corr<
            Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__, K);
      Eigen::Matrix<double, -1, 1> omega =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      omega = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
                K);
      Eigen::Matrix<double, -1, -1> etaStd =
         Eigen::Matrix<double, -1, -1>::Constant(K, nSub,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      etaStd = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(K,
                 nSub);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<double, -1, 1> THETA_pop =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> THETA_norm =
         Eigen::Matrix<double, -1, -1>::Constant(nSub, K,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> THETA_ind =
         Eigen::Matrix<double, -1, -1>::Constant(nSub, nTheta,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> X =
         Eigen::Matrix<double, -1, -1>::Constant(nData, nCmt,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> cHat =
         Eigen::Matrix<double, -1, 1>::Constant(nData,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> cHatObs =
         Eigen::Matrix<double, -1, 1>::Constant(nObs,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> logcHatObs =
         Eigen::Matrix<double, -1, 1>::Constant(nObs,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(CL_pop);
      out__.write(V1_pop);
      out__.write(ka_pop);
      out__.write(L);
      out__.write(omega);
      out__.write(etaStd);
      out__.write(sigma);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 15;
      stan::model::assign(THETA_pop,
        stan::math::to_vector(std::vector<local_scalar_t__>{CL_pop, V1_pop,
          ka_pop}), "assigning variable THETA_pop");
      current_statement__ = 16;
      stan::model::assign(THETA_norm,
        stan::math::transpose(
          stan::math::elt_multiply(stan::math::rep_matrix(THETA_pop, nSub),
            stan::math::exp(
              stan::math::diag_pre_multiply(omega,
                stan::math::multiply(L, etaStd))))),
        "assigning variable THETA_norm");
      current_statement__ = 17;
      stan::model::assign(THETA_ind, THETA_norm,
        "assigning variable THETA_ind");
      current_statement__ = 21;
      for (int i = 1; i <= nSub; ++i) {
        current_statement__ = 18;
        stan::model::assign(X,
          stan::math::transpose(
            torsten::pmx_solve_onecpt(
              stan::model::rvalue(TIME, "TIME",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(AMT, "AMT",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(RATE, "RATE",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::math::promote_scalar<double>(stan::model::rvalue(II,
                                                   "II",
                                                   stan::model::index_min_max(
                                                     stan::model::rvalue(
                                                       starts, "starts",
                                                       stan::model::index_uni(i)), 
                                                     stan::model::rvalue(
                                                       ends, "ends",
                                                       stan::model::index_uni(i))))),
              stan::model::rvalue(EVID, "EVID",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(CMT, "CMT",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(ADDL, "ADDL",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(SS, "SS",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::math::to_array_1d(
                stan::model::rvalue(THETA_ind, "THETA_ind",
                  stan::model::index_uni(i), stan::model::index_omni())))),
          "assigning variable X", stan::model::index_min_max(stan::model::rvalue(
                                                               starts,
                                                               "starts",
                                                               stan::model::index_uni(i)), 
                                    stan::model::rvalue(ends, "ends",
                                      stan::model::index_uni(i))),
                                    stan::model::index_omni());
        current_statement__ = 19;
        stan::model::assign(cHat,
          stan::math::elt_divide(
            stan::math::col(
              stan::model::rvalue(X, "X",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))), 2),
            stan::model::rvalue(THETA_ind, "THETA_ind",
              stan::model::index_uni(i), stan::model::index_uni(2))),
          "assigning variable cHat", stan::model::index_min_max(stan::model::rvalue(
                                                                  starts,
                                                                  "starts",
                                                                  stan::model::index_uni(i)), 
                                       stan::model::rvalue(ends, "ends",
                                         stan::model::index_uni(i))));
      }
      current_statement__ = 22;
      stan::model::assign(cHatObs,
        stan::model::rvalue(cHat, "cHat", stan::model::index_multi(iObs)),
        "assigning variable cHatObs");
      current_statement__ = 14;
      stan::model::assign(logcHatObs, stan::math::log(cHatObs),
        "assigning variable logcHatObs");
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "THETA_pop", THETA_pop,
                                            0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "THETA_norm",
                                            THETA_norm, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "THETA_ind", THETA_ind,
                                            0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "X", X, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "cHat", cHat, 0);
      if (emit_transformed_parameters__) {
        out__.write(THETA_pop);
        out__.write(THETA_norm);
        out__.write(THETA_ind);
        out__.write(X);
        out__.write(cHat);
        out__.write(cHatObs);
        out__.write(logcHatObs);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik =
         Eigen::Matrix<double, -1, 1>::Constant(nObs,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> etaStdPred =
         Eigen::Matrix<double, -1, -1>::Constant(K, nSub,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> THETAPred_norm =
         Eigen::Matrix<double, -1, -1>::Constant(nSub, K,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> THETAPred_ind =
         Eigen::Matrix<double, -1, -1>::Constant(nSub, K,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> XPred =
         Eigen::Matrix<double, -1, -1>::Constant(nData, 2,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> cHatPred =
         Eigen::Matrix<double, -1, 1>::Constant(nData,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> cPred_pop =
         Eigen::Matrix<double, -1, 1>::Constant(nData,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> cPred_ind =
         Eigen::Matrix<double, -1, 1>::Constant(nData,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 35;
      for (int i = 1; i <= nSub; ++i) {
        current_statement__ = 33;
        for (int j = 1; j <= K; ++j) {
          current_statement__ = 31;
          stan::model::assign(etaStdPred,
            stan::math::normal_rng(0, 1, base_rng__),
            "assigning variable etaStdPred", stan::model::index_uni(j),
                                               stan::model::index_uni(i));
        }
      }
      current_statement__ = 36;
      stan::model::assign(THETAPred_norm,
        stan::math::transpose(
          stan::math::elt_multiply(stan::math::rep_matrix(THETA_pop, nSub),
            stan::math::exp(
              stan::math::diag_pre_multiply(omega,
                stan::math::multiply(L, etaStdPred))))),
        "assigning variable THETAPred_norm");
      current_statement__ = 37;
      stan::model::assign(THETAPred_ind, THETAPred_norm,
        "assigning variable THETAPred_ind");
      current_statement__ = 41;
      for (int i = 1; i <= nSub; ++i) {
        current_statement__ = 38;
        stan::model::assign(XPred,
          stan::math::transpose(
            torsten::pmx_solve_onecpt(
              stan::model::rvalue(TIME, "TIME",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(AMT, "AMT",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(RATE, "RATE",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::math::promote_scalar<double>(stan::model::rvalue(II,
                                                   "II",
                                                   stan::model::index_min_max(
                                                     stan::model::rvalue(
                                                       starts, "starts",
                                                       stan::model::index_uni(i)), 
                                                     stan::model::rvalue(
                                                       ends, "ends",
                                                       stan::model::index_uni(i))))),
              stan::model::rvalue(EVID, "EVID",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(CMT, "CMT",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(ADDL, "ADDL",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::model::rvalue(SS, "SS",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))),
              stan::math::to_array_1d(
                stan::model::rvalue(THETAPred_ind, "THETAPred_ind",
                  stan::model::index_uni(i), stan::model::index_omni())))),
          "assigning variable XPred", stan::model::index_min_max(stan::model::rvalue(
                                                                   starts,
                                                                   "starts",
                                                                   stan::model::index_uni(i)), 
                                        stan::model::rvalue(ends, "ends",
                                          stan::model::index_uni(i))),
                                        stan::model::index_omni());
        current_statement__ = 39;
        stan::model::assign(cHatPred,
          stan::math::elt_divide(
            stan::math::col(
              stan::model::rvalue(XPred, "XPred",
                stan::model::index_min_max(stan::model::rvalue(starts,
                                             "starts",
                                             stan::model::index_uni(i)), 
                  stan::model::rvalue(ends, "ends",
                    stan::model::index_uni(i)))), 2),
            stan::model::rvalue(THETAPred_ind, "THETAPred_ind",
              stan::model::index_uni(i), stan::model::index_uni(2))),
          "assigning variable cHatPred", stan::model::index_min_max(stan::model::rvalue(
                                                                    starts,
                                                                    "starts",
                                                                    stan::model::index_uni(i)), 
                                           stan::model::rvalue(ends, "ends",
                                             stan::model::index_uni(i))));
      }
      current_statement__ = 53;
      for (int t = 1; t <= nData; ++t) {
        current_statement__ = 46;
        if (stan::math::logical_lt(
              stan::model::rvalue(cHat, "cHat", stan::model::index_uni(t)),
              0.0001)) {
          current_statement__ = 44;
          stan::model::assign(cPred_ind, 0,
            "assigning variable cPred_ind", stan::model::index_uni(t));
        } else {
          current_statement__ = 42;
          stan::model::assign(cPred_ind,
            stan::math::lognormal_rng(
              stan::math::log(
                stan::model::rvalue(cHat, "cHat", stan::model::index_uni(t))),
              sigma, base_rng__),
            "assigning variable cPred_ind", stan::model::index_uni(t));
        }
        current_statement__ = 51;
        if (stan::math::logical_lt(
              stan::model::rvalue(cHatPred, "cHatPred",
                stan::model::index_uni(t)), 0.0001)) {
          current_statement__ = 49;
          stan::model::assign(cPred_pop, 0,
            "assigning variable cPred_pop", stan::model::index_uni(t));
        } else {
          current_statement__ = 47;
          stan::model::assign(cPred_pop,
            stan::math::lognormal_rng(
              stan::math::log(
                stan::model::rvalue(cHatPred, "cHatPred",
                  stan::model::index_uni(t))), sigma, base_rng__),
            "assigning variable cPred_pop", stan::model::index_uni(t));
        }
      }
      current_statement__ = 56;
      for (int i_obs = 1; i_obs <= nObs; ++i_obs) {
        current_statement__ = 54;
        stan::model::assign(log_lik,
          stan::math::normal_lpdf<false>(
            stan::model::rvalue(cObs, "cObs", stan::model::index_uni(i_obs)),
            stan::model::rvalue(cHatObs, "cHatObs",
              stan::model::index_uni(i_obs)), sigma),
          "assigning variable log_lik", stan::model::index_uni(i_obs));
      }
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "THETAPred_norm",
                                            THETAPred_norm, 0);
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "THETAPred_ind",
                                            THETAPred_ind, 0);
      out__.write(log_lik);
      out__.write(etaStdPred);
      out__.write(THETAPred_norm);
      out__.write(THETAPred_ind);
      out__.write(XPred);
      out__.write(cHatPred);
      out__.write(cPred_pop);
      out__.write(cPred_ind);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ CL_pop = DUMMY_VAR__;
      CL_pop = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 100, CL_pop);
      local_scalar_t__ V1_pop = DUMMY_VAR__;
      V1_pop = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 150, V1_pop);
      local_scalar_t__ ka_pop = DUMMY_VAR__;
      ka_pop = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 50, ka_pop);
      Eigen::Matrix<local_scalar_t__, -1, -1> L =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(K, K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          stan::model::assign(L, in__.read<local_scalar_t__>(),
            "assigning variable L", stan::model::index_uni(sym2__),
                                      stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_cholesky_factor_corr(L);
      Eigen::Matrix<local_scalar_t__, -1, 1> omega =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(omega, in__.read<local_scalar_t__>(),
          "assigning variable omega", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, omega);
      Eigen::Matrix<local_scalar_t__, -1, -1> etaStd =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(K, nSub,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= nSub; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          stan::model::assign(etaStd, in__.read<local_scalar_t__>(),
            "assigning variable etaStd", stan::model::index_uni(sym2__),
                                           stan::model::index_uni(sym1__));
        }
      }
      out__.write(etaStd);
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"CL_pop", "V1_pop", "ka_pop", "L",
      "omega", "etaStd", "sigma", "THETA_pop", "THETA_norm", "THETA_ind",
      "X", "cHat", "cHatObs", "logcHatObs", "log_lik", "etaStdPred",
      "THETAPred_norm", "THETAPred_ind", "XPred", "cHatPred", "cPred_pop",
      "cPred_ind"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(nSub)},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(nSub), static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(nSub),
                          static_cast<size_t>(nTheta)},
      std::vector<size_t>{static_cast<size_t>(nData),
                          static_cast<size_t>(nCmt)},
      std::vector<size_t>{static_cast<size_t>(nData)},
      std::vector<size_t>{static_cast<size_t>(nObs)},
      std::vector<size_t>{static_cast<size_t>(nObs)},
      std::vector<size_t>{static_cast<size_t>(nObs)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(nSub)},
      std::vector<size_t>{static_cast<size_t>(nSub), static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(nSub), static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(nData), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(nData)},
      std::vector<size_t>{static_cast<size_t>(nData)},
      std::vector<size_t>{static_cast<size_t>(nData)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "CL_pop");
    param_names__.emplace_back(std::string() + "V1_pop");
    param_names__.emplace_back(std::string() + "ka_pop");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= nSub; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "etaStd" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "THETA_pop" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSub; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "THETA_norm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nTheta; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSub; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "THETA_ind" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nCmt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nData; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "X" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nData; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHatObs" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "logcHatObs" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nSub; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "etaStdPred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSub; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "THETAPred_norm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSub; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "THETAPred_ind" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nData; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "XPred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nData; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHatPred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nData; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cPred_pop" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nData; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cPred_ind" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "CL_pop");
    param_names__.emplace_back(std::string() + "V1_pop");
    param_names__.emplace_back(std::string() + "ka_pop");
    for (int sym1__ = 1; sym1__ <= ((K * (K - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= nSub; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "etaStd" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "THETA_pop" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSub; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "THETA_norm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nTheta; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSub; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "THETA_ind" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nCmt; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nData; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "X" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nData; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHat" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHatObs" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "logcHatObs" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= nObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nSub; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "etaStdPred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSub; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "THETAPred_norm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSub; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "THETAPred_ind" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nData; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "XPred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nData; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cHatPred" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nData; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cPred_pop" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= nData; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cPred_ind" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"CL_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"V1_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ka_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"etaStd\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(nSub) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"THETA_pop\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"THETA_norm\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSub) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"THETA_ind\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSub) + ",\"cols\":" + std::to_string(nTheta) + "},\"block\":\"transformed_parameters\"},{\"name\":\"X\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nData) + ",\"cols\":" + std::to_string(nCmt) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cHat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nData) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cHatObs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObs) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logcHatObs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObs) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObs) + "},\"block\":\"generated_quantities\"},{\"name\":\"etaStdPred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(nSub) + "},\"block\":\"generated_quantities\"},{\"name\":\"THETAPred_norm\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSub) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"THETAPred_ind\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSub) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"XPred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nData) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"},{\"name\":\"cHatPred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nData) + "},\"block\":\"generated_quantities\"},{\"name\":\"cPred_pop\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nData) + "},\"block\":\"generated_quantities\"},{\"name\":\"cPred_ind\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nData) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"CL_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"V1_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ka_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((K * (K - 1)) / 2)) + "},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"etaStd\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(nSub) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"THETA_pop\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"THETA_norm\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSub) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"THETA_ind\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSub) + ",\"cols\":" + std::to_string(nTheta) + "},\"block\":\"transformed_parameters\"},{\"name\":\"X\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nData) + ",\"cols\":" + std::to_string(nCmt) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cHat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nData) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cHatObs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObs) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logcHatObs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObs) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nObs) + "},\"block\":\"generated_quantities\"},{\"name\":\"etaStdPred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(nSub) + "},\"block\":\"generated_quantities\"},{\"name\":\"THETAPred_norm\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSub) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"THETAPred_ind\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSub) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"XPred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nData) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"},{\"name\":\"cHatPred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nData) + "},\"block\":\"generated_quantities\"},{\"name\":\"cPred_pop\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nData) + "},\"block\":\"generated_quantities\"},{\"name\":\"cPred_ind\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nData) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((1 + 1) + 1) + (K * K)) + K) + (K * nSub)) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  ((((((K + (nSub * K)) + (nSub * nTheta)) + (nData * nCmt)) + nData) + nObs)
    + nObs);
      const size_t num_gen_quantities = emit_generated_quantities * 
  (((((((nObs + (K * nSub)) + (nSub * K)) + (nSub * K)) + (nData * 2)) +
      nData) + nData) + nData);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((1 + 1) + 1) + (K * K)) + K) + (K * nSub)) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  ((((((K + (nSub * K)) + (nSub * nTheta)) + (nData * nCmt)) + nData) + nObs)
    + nObs);
      const size_t num_gen_quantities = emit_generated_quantities * 
  (((((((nObs + (K * nSub)) + (nSub * K)) + (nSub * K)) + (nData * 2)) +
      nData) + nData) + nData);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 7> names__{"CL_pop", "V1_pop",
      "ka_pop", "L", "omega", "etaStd", "sigma"};
      const std::array<Eigen::Index, 7> constrain_param_sizes__{1, 1, 
       1, (K * K), K, (K * nSub), 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = intermediate2_model_namespace::intermediate2_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return intermediate2_model_namespace::profiles__;
}

#endif


